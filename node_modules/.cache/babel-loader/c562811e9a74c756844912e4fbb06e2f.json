{"ast":null,"code":"import _objectSpread from \"/home/caio/workspace/wp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/caio/workspace/wp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/caio/workspace/wp/src/compopnents/App.jsx\";\nimport React from \"react\";\nimport \"../styles/App.css\";\nimport LeafletMap from \"./LeafletMap\";\nimport RouterPanel from \"./RouterPanel\";\nimport SimulationOptions from \"./SimulationOptions\";\nimport { MDBIcon } from \"mdbreact\";\nimport routers from \"../routersList\";\nimport { clone } from \"../utils\";\n\nconst App = () => {\n  const getRandom = (min, max) => {\n    return Math.random() * (max - min) + min;\n  };\n\n  const patrolInitialPosition = {\n    status: true,\n    lat: 43.5387,\n    lng: -79.666,\n    direction: 0,\n    //   0->east, 1->north, 2->weast, 3->south\n    step: 14\n  };\n\n  const intruderPosition = () => {\n    const target = routers[Math.floor(getRandom(0, 10))];\n    return {\n      name: target.name,\n      color: target.color,\n      status: false,\n      lat: getRandom(43.5389, 43.53923),\n      lng: getRandom(-79.667872, -79.6658873),\n      direction: 2,\n      //   0->east, 1->north, 2->weast, 3->south\n      step: 14\n    };\n  };\n\n  const center = [43.53885796212106, -79.66675600122652];\n\n  const stepCounter = target => {\n    let stepCounter = target.step;\n    let patrolDirection = target.direction;\n\n    if (stepCounter > 0) {\n      stepCounter = stepCounter - 1;\n      return {\n        step: stepCounter,\n        direction: patrolDirection\n      };\n    } else {\n      patrolDirection = patrolDirection + 1;\n\n      if (patrolDirection % 2 === 0) {\n        // Mississauga is way too North, I had to adjust\n        stepCounter = 14; // the step because lat!=lgn near the polos\n      } else {\n        stepCounter = 5; // Just 5 steps when walking on vertical.\n      }\n\n      return {\n        step: stepCounter,\n        direction: patrolDirection\n      };\n    }\n  };\n\n  const _React$useState = React.useState(true),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        showSimulationOptions = _React$useState2[0],\n        setShowSimulationOptions = _React$useState2[1];\n\n  const _React$useState3 = React.useState(patrolInitialPosition),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        patrol = _React$useState4[0],\n        setPatrol = _React$useState4[1];\n\n  const _React$useState5 = React.useState(intruderPosition()),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        intruder = _React$useState6[0],\n        setIntruder = _React$useState6[1];\n\n  const _React$useState7 = React.useState(false),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        showRadius = _React$useState8[0],\n        setShowRadius = _React$useState8[1];\n\n  const _React$useState9 = React.useState(\"\"),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        cloned = _React$useState10[0],\n        setCloned = _React$useState10[1];\n\n  const toogleShowRadius = () => {\n    setShowRadius(!showRadius);\n  };\n\n  const toogleIntruder = () => {\n    let newIntruder = intruderPosition();\n    newIntruder.status = !intruder.status;\n    setIntruder(newIntruder);\n  };\n\n  const toogleSimulationOptions = () => {\n    setShowSimulationOptions(!showSimulationOptions);\n  };\n\n  const buttonColor = () => {\n    return showSimulationOptions ? \"amber-text\" : \"grey-text\";\n  };\n\n  const updatePosition = target => {\n    let newTarget = {};\n\n    switch (target.direction % 4) {\n      case 0:\n        newTarget.lat = target.lat;\n        newTarget.lng = target.lng - 0.0001;\n        break;\n\n      case 1:\n        newTarget.lat = target.lat + 0.0001;\n        newTarget.lng = target.lng;\n        break;\n\n      case 2:\n        newTarget.lat = target.lat;\n        newTarget.lng = target.lng + 0.0001;\n        break;\n\n      case 3:\n        newTarget.lat = target.lat - 0.0001;\n        newTarget.lng = target.lng;\n        break;\n\n      default:\n        break;\n    }\n\n    newTarget = _objectSpread({}, newTarget, {}, stepCounter(target));\n    return newTarget;\n  };\n\n  const updatePatrolPosition = () => {\n    setPatrol(updatePosition(patrol));\n  }; // eslint-disable-next-line\n\n\n  const updateIntruderPosition = () => {\n    setIntruder(updatePosition(intruder));\n  };\n\n  const update = () => {\n    updatePatrolPosition();\n  };\n\n  const toRadians = degrees => {\n    var pi = Math.PI;\n    return degrees * (pi / 180);\n  };\n\n  const distance = (position1, position2) => {\n    var R = 6371e3; // metres\n\n    var lat1 = toRadians(position1.lat);\n    var lat2 = toRadians(position2.lat);\n    var latDiff = toRadians(position2.lat - position1.lat);\n    var lngDiff = toRadians(position2.lng - position1.lng);\n    var a = Math.sin(latDiff / 2) * Math.sin(latDiff / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(lngDiff / 2) * Math.sin(lngDiff / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  };\n\n  setTimeout(update, 1000);\n\n  const allSignals = () => {\n    let allSignals = clone(routers);\n    intruder.status && allSignals.push(intruder);\n    return allSignals;\n  };\n\n  const getRouterPosition = name => {\n    for (let key in routers) {\n      const router = routers[key];\n\n      if (router.name === name) {\n        return {\n          lat: router.lat,\n          lng: router.lng\n        };\n      }\n    }\n  };\n\n  const checkWifi = () => {\n    const signals = allSignals();\n\n    for (let key in signals) {\n      const listenNow = signals[key];\n      const signalPosition = {\n        lat: listenNow.lat,\n        lng: listenNow.lng\n      };\n      const routerPosition = getRouterPosition(listenNow.name);\n      let measuredDistance = distance(patrol, signalPosition);\n      let routerDistance = distance(patrol, routerPosition);\n\n      if (cloned === \"\" && measuredDistance < 30 && measuredDistance !== routerDistance) {\n        setCloned(listenNow.name);\n      }\n    }\n  };\n\n  const display = () => {\n    return showSimulationOptions ? \"Show\" : \"Hide\";\n  };\n\n  const resetWifi = () => {\n    setCloned(\"\");\n  };\n\n  const alarm = () => {\n    return cloned !== '' ? 'alarm-on' : 'alarm-off';\n  };\n\n  checkWifi();\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    className: \"App-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(MDBIcon, {\n    icon: \"wifi\",\n    size: \"4x\",\n    className: \"amber-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), React.createElement(MDBIcon, {\n    icon: \"bars\",\n    size: \"4x\",\n    className: buttonColor(),\n    onClick: () => toogleSimulationOptions(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: alarm(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, `Man in the middle attack detected in router ${cloned}`), React.createElement(\"div\", {\n    className: \"Body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(RouterPanel, {\n    className: \"RouterPanel\",\n    routers: routers,\n    cloned: cloned,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }), React.createElement(LeafletMap, {\n    center: center,\n    routers: routers,\n    patrol: patrol,\n    intruder: intruder,\n    showRadius: showRadius,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }), React.createElement(SimulationOptions, {\n    className: display(),\n    display: display(),\n    toogleShowRadius: toogleShowRadius,\n    toogleIntruder: toogleIntruder,\n    resetWifi: resetWifi,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/caio/workspace/wp/src/compopnents/App.jsx"],"names":["React","LeafletMap","RouterPanel","SimulationOptions","MDBIcon","routers","clone","App","getRandom","min","max","Math","random","patrolInitialPosition","status","lat","lng","direction","step","intruderPosition","target","floor","name","color","center","stepCounter","patrolDirection","useState","showSimulationOptions","setShowSimulationOptions","patrol","setPatrol","intruder","setIntruder","showRadius","setShowRadius","cloned","setCloned","toogleShowRadius","toogleIntruder","newIntruder","toogleSimulationOptions","buttonColor","updatePosition","newTarget","updatePatrolPosition","updateIntruderPosition","update","toRadians","degrees","pi","PI","distance","position1","position2","R","lat1","lat2","latDiff","lngDiff","a","sin","cos","c","atan2","sqrt","setTimeout","allSignals","push","getRouterPosition","key","router","checkWifi","signals","listenNow","signalPosition","routerPosition","measuredDistance","routerDistance","display","resetWifi","alarm"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/App.css\";\nimport LeafletMap from \"./LeafletMap\";\nimport RouterPanel from \"./RouterPanel\";\nimport SimulationOptions from \"./SimulationOptions\";\nimport { MDBIcon } from \"mdbreact\";\nimport routers from \"../routersList\";\nimport { clone } from \"../utils\";\n\nconst App = () => {\n  const getRandom = (min, max) => {\n    return Math.random() * (max - min) + min;\n  };\n\n  const patrolInitialPosition = {\n    status: true,\n    lat: 43.5387,\n    lng: -79.666,\n    direction: 0, //   0->east, 1->north, 2->weast, 3->south\n    step: 14\n  };\n\n  const intruderPosition = () => {\n    const target = routers[Math.floor(getRandom(0, 10))];\n    return {\n      name: target.name,\n      color: target.color,\n      status: false,\n      lat: getRandom(43.5389, 43.53923),\n      lng: getRandom(-79.667872, -79.6658873),\n      direction: 2, //   0->east, 1->north, 2->weast, 3->south\n      step: 14\n    };\n  };\n\n  const center = [43.53885796212106, -79.66675600122652];\n\n  const stepCounter = target => {\n    let stepCounter = target.step;\n    let patrolDirection = target.direction;\n    if (stepCounter > 0) {\n      stepCounter = stepCounter - 1;\n      return { step: stepCounter, direction: patrolDirection };\n    } else {\n      patrolDirection = patrolDirection + 1;\n      if (patrolDirection % 2 === 0) {\n        // Mississauga is way too North, I had to adjust\n        stepCounter = 14; // the step because lat!=lgn near the polos\n      } else {\n        stepCounter = 5; // Just 5 steps when walking on vertical.\n      }\n      return { step: stepCounter, direction: patrolDirection };\n    }\n  };\n\n  const [showSimulationOptions, setShowSimulationOptions] = React.useState(\n    true\n  );\n  const [patrol, setPatrol] = React.useState(patrolInitialPosition);\n  const [intruder, setIntruder] = React.useState(intruderPosition());\n  const [showRadius, setShowRadius] = React.useState(false);\n  const [cloned, setCloned] = React.useState(\"\");\n\n  const toogleShowRadius = () => {\n    setShowRadius(!showRadius);\n  };\n\n  const toogleIntruder = () => {\n    let newIntruder = intruderPosition();\n    newIntruder.status = !intruder.status;\n    setIntruder(newIntruder);\n  };\n\n  const toogleSimulationOptions = () => {\n    setShowSimulationOptions(!showSimulationOptions);\n  };\n\n  const buttonColor = () => {\n    return showSimulationOptions ? \"amber-text\" : \"grey-text\";\n  };\n\n  const updatePosition = target => {\n    let newTarget = {};\n    switch (target.direction % 4) {\n      case 0:\n        newTarget.lat = target.lat;\n        newTarget.lng = target.lng - 0.0001;\n        break;\n      case 1:\n        newTarget.lat = target.lat + 0.0001;\n        newTarget.lng = target.lng;\n        break;\n      case 2:\n        newTarget.lat = target.lat;\n        newTarget.lng = target.lng + 0.0001;\n        break;\n      case 3:\n        newTarget.lat = target.lat - 0.0001;\n        newTarget.lng = target.lng;\n        break;\n      default:\n        break;\n    }\n    newTarget = { ...newTarget, ...stepCounter(target) };\n    return newTarget;\n  };\n\n  const updatePatrolPosition = () => {\n    setPatrol(updatePosition(patrol));\n  };\n\n  // eslint-disable-next-line\n  const updateIntruderPosition = () => {\n    setIntruder(updatePosition(intruder));\n  };\n\n  const update = () => {\n    updatePatrolPosition();\n  };\n\n  const toRadians = degrees => {\n    var pi = Math.PI;\n    return degrees * (pi / 180);\n  };\n\n  const distance = (position1, position2) => {\n    var R = 6371e3; // metres\n    var lat1 = toRadians(position1.lat);\n    var lat2 = toRadians(position2.lat);\n    var latDiff = toRadians(position2.lat - position1.lat);\n    var lngDiff = toRadians(position2.lng - position1.lng);\n    var a =\n      Math.sin(latDiff / 2) * Math.sin(latDiff / 2) +\n      Math.cos(lat1) *\n        Math.cos(lat2) *\n        Math.sin(lngDiff / 2) *\n        Math.sin(lngDiff / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n    return R * c;\n  };\n\n  setTimeout(update, 1000);\n\n  const allSignals = () => {\n    let allSignals = clone(routers);\n    intruder.status && allSignals.push(intruder);\n    return allSignals;\n  };\n\n  const getRouterPosition = name => {\n    for (let key in routers) {\n      const router = routers[key];\n      if (router.name === name) {\n        return {\n          lat: router.lat,\n          lng: router.lng\n        };\n      }\n    }\n  };\n\n  const checkWifi = () => {\n    const signals = allSignals();\n    for (let key in signals) {\n      const listenNow = signals[key];\n      const signalPosition = { lat: listenNow.lat, lng: listenNow.lng };\n      const routerPosition = getRouterPosition(listenNow.name);\n      let measuredDistance = distance(patrol, signalPosition);\n      let routerDistance = distance(patrol, routerPosition);\n      if (\n        cloned === \"\" &&\n        measuredDistance < 30 &&\n        measuredDistance !== routerDistance\n      ) {\n        setCloned(listenNow.name);\n      }\n    }\n  };\n\n  const display = () => {\n    return showSimulationOptions ? \"Show\" : \"Hide\";\n  };\n\n  const resetWifi = () => {\n    setCloned(\"\");\n  };\n\n  const alarm = () => {\n    return cloned !== '' ? 'alarm-on' : 'alarm-off';\n  }\n\n  checkWifi();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MDBIcon icon=\"wifi\" size=\"4x\" className=\"amber-text\" />\n        <MDBIcon\n          icon=\"bars\"\n          size=\"4x\"\n          className={buttonColor()}\n          onClick={() => toogleSimulationOptions()}\n        />\n      </header>\n      <div className={alarm()}>\n        {`Man in the middle attack detected in router ${cloned}`}\n        </div>\n      <div className=\"Body\">\n        <RouterPanel\n          className=\"RouterPanel\"\n          routers={routers}\n          cloned={cloned}\n        />\n          <LeafletMap\n            center={center}\n            routers={routers}\n            patrol={patrol}\n            intruder={intruder}\n            showRadius={showRadius}\n          />\n        <SimulationOptions\n          className={display()}\n          display={display()}\n          toogleShowRadius={toogleShowRadius}\n          toogleIntruder={toogleIntruder}\n          resetWifi={resetWifi}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}